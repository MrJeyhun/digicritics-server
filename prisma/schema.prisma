generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = ""
}

// schema.prisma

enum UserStatus {
  USER
  ADMIN
  BLOCKED
}

model Users {
  id           Int        @id @default(autoincrement())
  fullName     String
  email        String     @unique
  status       UserStatus @default(USER)
  profileImage String?
  createdTime  DateTime   @default(now())
  reviews      Review[]
  Like         Like[]
  Rating       Rating[]
  Comment      Comment[]
}

model Review {
  id          Int    @id @default(autoincrement())
  reviewTitle String
  workName    String
  reviewGrade Int
  categoryId  Int?

  reviewContent String
  reviewImages  String[]

  tags     Tag[]
  likes    Like[]
  ratings  Rating[]
  comments Comment[]

  category Category? @relation(fields: [categoryId], references: [id])
  userId   Int
  user     Users     @relation(fields: [userId], references: [id])

  createdTime DateTime @default(now())
}

model Like {
  id       Int @id @default(autoincrement())
  userId   Int
  reviewId Int

  user   Users  @relation(fields: [userId], references: [id])
  review Review @relation(fields: [reviewId], references: [id])
}

model Rating {
  id       Int @id @default(autoincrement())
  userId   Int
  reviewId Int
  rating   Int

  user   Users  @relation(fields: [userId], references: [id])
  review Review @relation(fields: [reviewId], references: [id])
}

model Comment {
  id          Int      @id @default(autoincrement())
  userId      Int
  reviewId    Int
  content     String
  createdTime DateTime @default(now())

  user   Users  @relation(fields: [userId], references: [id])
  review Review @relation(fields: [reviewId], references: [id])
}

model Tag {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  reviews Review[]
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  reviews Review[]
}
